generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id                   String       @id @default(uuid())
  nome                 String
  dataNascimento       String?
  contato              String?
  email                String?
  typeDocumentSelected String?
  documento            String?      @unique
  estado               String?      @default("")
  cidade               String?
  bairro               String?
  rua                  String?
  numero               String?
  ultimaViagem         DateTime?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  dependentes          Dependente[] @relation("DependentesDoCliente")
  passageiro           Passageiro?  @relation("PassageiroDoCliente")

  FichaExcursaoHistory FichaExcursaoHistory[]
}

model Dependente {
  id                   String      @id @default(uuid())
  nome                 String
  typeDocumentSelected String?
  documento            String?     @unique
  clienteId            String
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  cliente              Cliente     @relation("DependentesDoCliente", fields: [clienteId], references: [id], onDelete: Cascade)
  passageiro           Passageiro? @relation("PassageiroDoDependente")
}

model Passageiro {
  id                   String      @id @default(uuid())
  nome                 String
  typeDocumentSelected String
  documento            String      @unique
  clienteId            String?     @unique
  dependenteId         String?     @unique
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  cliente              Cliente?    @relation("PassageiroDoCliente", fields: [clienteId], references: [id], onDelete: Cascade)
  dependente           Dependente? @relation("PassageiroDoDependente", fields: [dependenteId], references: [id])
}

model FluxoCaixa {
  id             String         @id @default(uuid())
  tipo           TipoOperacao
  tipoDocumento  String         @default("")
  valor          Float
  data           DateTime
  formaPagamento FormaPagamento
  descricao      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model SaldoAnterior {
  id            String   @id @default(uuid())
  mes           String
  ano           String
  saldoAnterior Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([mes, ano])
}

enum TipoOperacao {
  ENTRADA
  SAIDA
}

enum FormaPagamento {
  PIX
  DINHEIRO
  CARTAO_DE_CREDITO
}

model NumeroContrato {
  id          String @id @default(uuid())
  numeroAtual Int
}

// History
model OrcamentoHistory {
  id               String   @id @default(uuid())
  nomeCliente      String
  telefoneContato  String
  localSaida       String
  destinoViagem    String
  dataSaida        DateTime
  horaSaida        String
  dataRetorno      DateTime
  horaRetorno      String
  valorComDespesa  Int
  valorSemDespesa  Int
  valorComNota     Int
  taxaPix          Int
  modeloVan        String?
  cortesiaKm       Int?
  valorAcrescimoKm Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model ListaPassageirosHistory {
  id                String   @id @default(uuid())
  numeroCarro       String
  placa             String
  motorista         String
  origem            String
  destino           String
  dataSaida         DateTime
  horaSaida         String
  dataRetorno       DateTime
  horaRetorno       String
  extensaoRoteiroKm String
  passageiros       Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ContratoHistory {
  id               String   @id @default(uuid())
  tipoContrato     String
  nomeCliente      String
  documento        String
  endereco         Json
  placaVeiculo     String
  descricaoVeiculo String
  dataInicial      DateTime
  horaInicial      String
  dataFinal        DateTime
  horaFinal        String
  origem           String
  destino          String
  detalhesLocacao  Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model RecibosHistory {
  id             String   @id @default(uuid())
  nomeCliente    String
  pacoteViagem   String
  valor          String
  formaPagamento String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model FichaExcursaoHistory {
  id                    String   @id @default(uuid())
  excursaoPara          String
  localSaida            String
  dataSaida             DateTime
  horaSaida             String
  dataRetorno           DateTime
  horaRetorno           String
  clienteid             String
  tipoDeHospedagem      String
  valorIntegralExcursao String
  entradaParcelamento   String
  valorParcelas         String
  qtdParcelas           String
  dataPagamentoParcelas String
  dependentes           Json
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  cliente Cliente @relation(fields: [clienteid], references: [id])
}

model Usuario {
  id    Int    @id @default(autoincrement())
  email String @unique
  senha String
  nome  String
}
